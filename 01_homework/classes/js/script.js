//ключевое слово = имя класса
class Task {      // класс это функциия, которая создает объекты
    constructor(){
        this.title = 'to clean the room';
        console.log('task creation');
    }
}
console.log(typeof Task); //тип класса - функция

let task =  new Task('to clean the room');    //вызываем функцию Task, ставя перед ней ключевое слово new
console.log(typeof task); //тип переменной task - объект, точнее содержит ссылку на объект

console.log(task instanceof Task); //объект task является представителем класса Task

console.log(task.title);

//созданиие объекта, объект - это экземлпяр, представитель класса, объект созданный по шаблону
//с опредленными свойствами и методами, указанными в классе
//для создания объектов мы ииспользуем ключевое слово new

//Дальше объявим констуктор
//Констуктор - это особый метод, который вызывается в момент создания объекта
//То есть, когда мы используем ключевое слово new
//Он создает свойство и инциализирует, то есть подготавливает объект к использованию

//В классе может быть только ОДИН конструктор, если укажем несколько, то получим ошибку
//если мы не укажем конструктор вообще, то JS сам создаст пустой конструктор

//Далее перейдем к свойствам
//Свойства - это характеристики объекта, описывает какой объект иил чтоу него имеется
//Свойства указываются ТОЛЬКО в конструкторе
//Таким образом каждый представитель класса имеет эти свойства
//Для того, чтобы создать свойство у объекта в конструкторе испольузется ключевое слово this,
//который указывает на объект, который мы создаем

//конструктор может принимать параметры, которые мы можем указать в качестве аргументов при создании объекта
class Task2 {      // класс это функциия, которая создает объекты
    constructor(title = Task2.getDefaultTitle()){
        this.title = title;                              //свойства класса пишутся в конструкторе
        this.done = false;
        Task2.count += 1;                         //статичсекое свойство
        console.log('task creation');
    }
    complete() {                                 //метод класса
        this.done = true;
        console.log('mission "' + this.title +'" accomplished'); //метод класса
    }

    static getDefaultTitle(){    //статический метод (значение заголовка по умолчанию, если тот не был передан)
        return 'Task';
    }
}

Task2.count = 0;       //статичсекое свойство

let task2 =  new Task2('to clean the room');
console.log(task2.title);


let task3 =  new Task2('buy products');
console.log(task3.title);

task3.complete();
console.log(Task.count);

let task4 =  new Task2();
console.log(task4.title);

//console.log(task2.getDefaultTitle()); //у task33 метода getDefaultTitle нет, получить доступ можно использовав имя класса


//Далее рассмотрим создание методов
//Методы - это что объект умеет делать, то есть его возможности
//Это функции, которые в классе называются методами

//Далее перейдем к статическим свойствам и методам
//Статические свойства - это свойства, которые принадлежат самому классу, а не объектам созданныи на его основе
//Статические свойства используются для хранения вспомогательной информации
//Статическая перемнная объявляется после (ниже) объявления класса Task.count = 0;

//Статические методы - это методы, которые принадлежат самому классу, а не объектам созданныи на его основе
//Статические методы используются для создания вспомогательной функции

//У класс помимо свойств и методов, можно добавить особые свойства get и set (getter, setter)
//которые внутри класса выглядят и ведут себя, как методы, а снаружи выглядят и ведут себя, как свойства
//Эти свойства-методы позволяют получить доступ и присвоить значение "настоящим" свойствам объекта
//Выступают в роли фильтра

//Начнем с get (getter)
//очень похож на метод, на самом деле это и есть метод
//свойство get связывает свойство объекта с функцией, которое будет будет вызываться при обращении к этому свойству
//в теле метода мы вернем строку в соответствии со значением свойства done
//названия свойств get и set не должны совпадать с названиями основными свойствами объекта
//get done() - перезаписываем, чтобы решить проблему нужно переименовать
//в JS не принято называть свойства и методы с заглавной буквы
//Также в JS свойства и методы в классах не делятся на лиичные и публичные, они все публичные
//Перед называнием ставим нижнее подчеркивание, это делает свойство _done - личным
//без set проиизошла ошибка, из-за того, что мы объявили свойство get,
// но в методе complete() мы done присваиваем значение true
//Давайте добавиим классу Task3 свойство set
//Отличие set от get, в том, что set принимет параметр, который иы можем присвоить свойству
//предварительно проверив этот параметр, чаще всего его называют value
//в теле метода мы проверим наличие значение value и является ли это значение типа boolean



class Task3 {
    constructor(title = Task3.getDefaultTitle()){
        this.title = title;
        this._done = false;
        Task3.count += 1;
        console.log('task3 creation');
    }

    get done(){
        return this._done === true ? 'completed' : 'not completed'
    }

    set done(value){
        if (value !== undefined && typeof value === 'boolean'){
            this._done = value;
        } else {
            console.error(' error! specify value true or false');
        }
    }

    complete(){
        this.done = 1;
        console.log('mission "' + this.title +'" accomplished');
    }
    static getDefaultTitle() {
        return 'Task3'
    }
}
Task3.count = 0;


let task5 = new Task3('the clean the room');
console.log(task5.done);  // >>>false, ответ не понятен простым пользователям
// эту проблему можно решить используя свойство get
console.log(task5._done);

task5.complete();
console.log(task5.done);
console.log(task5._done);







